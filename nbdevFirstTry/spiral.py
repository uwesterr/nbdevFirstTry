# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_spiral.ipynb.

# %% auto 0
__all__ = ['t', 'v', 'B', 'r_max', 't_max', 'dut_pat_loop', 'phi', 'DutPatLoop']

# %% ../00_spiral.ipynb 2
import numpy as np
import  matplotlib.pyplot as plt


# %% ../00_spiral.ipynb 4
t = np.linspace(0,40,100)
v = 0.11 # velocity in rad/s
B = 8.6e-6 # spiral arm distance
r_max=800e-6 # max radius in rad
t_max=3.14*(r_max)**2/(B*v) # calculate resulting spiral duration

# %% ../00_spiral.ipynb 6
def phi(B:float, # spiral arm distance
        v:float, # spiral angular velocity
        t:float, # time
        flag_out:int, # indicated if spiral goes out- or inwards
        t_max:float, # time for one outward spiral_count
        spiral_count:int ):# counts the number of performed spirals
    "compute phi and radius"
    if flag_out:
        phi1 = np.sqrt(4*np.pi/B*v*(t-t_max*(spiral_count)))

        r=B*phi1/(2*np.pi)
       # print(phi1)
        if r >= 800e-6:
            flag_out=0
            spiral_count=spiral_count+1
            #t_max=t
    else:
        if ((4*np.pi/B*v*((spiral_count+1)*t_max-t))>=0):
            phi1 = np.sqrt(4*np.pi/B*v*((spiral_count+1)*t_max-t))
            
        else:
            phi1=0.0
        r=B*phi1/(2*np.pi)
        if r <= 5e-6:
            flag_out=1  
            spiral_count=spiral_count+1  
    return phi1, flag_out, r, spiral_count


# %% ../00_spiral.ipynb 11
class   DutPatLoop:
    """
    Class to implement DUT PAT loop for STB
    """

    
    def __init__(self):
        """
        Initialize LCT values
        

        Args:
            para_lct (dict): parameters for LCT
            para_system (dict): parameters for system, like max time, time steps, ...
            debug_flag (boolean): 1 if debug mode is on and print statements are active
        """
        self.B = 8.6e-6 # spiral arm distance
        self.v = 0.11 # spiral angular velocity
        
    def phi_method(self,
            B:float, # spiral arm distance
            v:float, # spiral angular velocity
            t:float, # time
            flag_out:int, # indicated if spiral goes out- or inwards
            t_max:float, # time for one outward spiral_count
            spiral_count:int ):# counts the number of performed spirals
        "compute phi and radius"
        if flag_out:
            phi1 = np.sqrt(4*np.pi/B*v*(t-t_max*(spiral_count)))

            r=B*phi1/(2*np.pi)
        # print(phi1)
            if r >= 800e-6:
                flag_out=0
                spiral_count=spiral_count+1
                #t_max=t
        else:
            if ((4*np.pi/B*v*((spiral_count+1)*t_max-t))>=0):
                phi1 = np.sqrt(4*np.pi/B*v*((spiral_count+1)*t_max-t))
                
            else:
                phi1=0.0
            r=B*phi1/(2*np.pi)
            if r <= 5e-6:
                flag_out=1  
                spiral_count=spiral_count+1  
        return phi1, flag_out, r, spiral_count

# %% ../00_spiral.ipynb 18
dut_pat_loop=DutPatLoop()
